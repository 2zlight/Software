<?xml version="1.0" encoding="utf-8"?>
<launch>
<!-- start switch args -->
    <arg name="camera" default="true"/>
    <arg name="/camera/raw" default="false"/>
    <arg name="/camera/cam_info" default="true"/>
    <arg name="/camera/raw/rect" default="false"/>
    <arg name="/camera/local" default="false" />

    <arg name="wheels" default="true"/>

    <arg name="joystick" default="true"/>

    <arg name="odometry" default="false"/>
    <arg name="/odometry/forward_kinematics" default="false"/>

    <arg name="lane_following" default="true"/>
    <arg name="/lane_following/line_detection" default="true"/>
    <arg name="/lane_following/ground_projection" default="true"/>
    <arg name="/lane_following/lane_filter" default="true"/>
    <arg name="/lane_following/stop_line_filter" default="true"/>
    <arg name="/lane_following/lane_controller" default="true"/>

    <arg name="fsm" default="true"/>

    <arg name="obstacle_avoidance" default="false"/>
    <arg name="/obstacle_avoidance/simple_stop" default="true"/>
    <arg name="/obstacle_avoidance/detection" default="true"/>
    <arg name="/obstacle_avoidance/safety" default="true"/>

    <arg name="vehicle_avoidance" default="false"/>
    <arg name="/vehicle_avoidance/detection" default="true" />
    <arg name="/vehicle_avoidance/control" default="true"/>

    <arg name="apriltags" default="false"/>
    <arg name="/apriltags/local" default="false" />

    <arg name="coordination" default="false"/>

    <arg name="navigation" default="false"/>
    <arg name="/navigation/intersection_control" default="true"/>
    <arg name="/navigation/apriltags_random" default="true"/>
    <arg name="/navigation/random_sr_turns" default="false"/>
    <arg name="/navigation/graph_planner" default="false"/>
    <!-- NOTE: either apriltags_random or graph_planner but not both -->

    <arg name="parallel_autonomy" default="false"/>

    <arg name="global_localizer" default="false"/>

    <arg name="SLAM" default="false"/>

    <arg name="localization" default="false"/>
    <arg name="/localization/local" default="false" />
    <arg name="/localization/map_name" default="open_house_dp6" />
    <arg name="/localization/gui" default="false"/>

    <!-- end switch args -->

    <!--args from our old file-->
    <arg name="veh"/>
    <arg name="local" default="false" doc="true for running everything you possibly can on laptop. false for everything running on vehicle."/>
    <arg name="config" default="baseline" doc="Specify a config."/>
    <arg name="param_file_name" default="default" doc="Specify a param file. ex:megaman." />
    <arg name="live" default="true" doc="live set to false means we don't run the actual camera (i.e. running from a log file" />
    <arg name = "end_space" default="1"/>

    <!-- Camera -->
 	<include if="$(arg camera)" file="$(find duckietown)/launch/camera.launch">
 		<arg name="veh" value="$(arg veh)"/>
 		<arg name="local" value="$(arg local)"/>
 		<arg name="config" value="$(arg config)"/>
 		<arg name="param_file_name" value="$(arg param_file_name)"/>
 		<arg name="raw" value="true"/>
 		<arg name="cam_info" value="true"/> 
 		<arg name="live" value="$(arg live)"/>
		<arg name="rect" value="true" />
 	</include>
 
 	<!-- AprilTag Detection -->
    <remap from="image_rect" to="camera_node/image/rect" />
    <remap from="camera_node/image/camera_info" to="camera_node/raw_camera_info" />
    <include file="$(find apriltags_ros)/launch/apriltag_detector_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="local" value="$(arg local)"/>
        <arg name="config" value="$(arg config)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>
 
 	<!-- AprilTag Postprocessing node -->
 	<remap from="apriltags_postprocessing_node/apriltags_in" to="tag_detections" />
 	<!-- remap for localization node, not sure why remap has to be put here -->
 	<remap from="apriltags_postprocessing_node/apriltags_out" to="localization_node/apriltags" />
 	<remap from="localization_node/pose_duckiebot" to="path_planning_node/pose_duckiebot" />
    <remap from="path_planning_node/parking_pose" to="lane_controller_node/parking_pose" />
 	<include file="$(find apriltags_ros)/launch/apriltags_postprocessing_node.launch">
 		<arg name="veh" value="$(arg veh)"/>
        <arg name="local" value="$(arg local)"/>
        <arg name="config" value="$(arg config)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
 	</include>

 	<!-- Localization -->
    <include file="$(find localization)/launch/localization_node.launch">
        <arg name="veh" value="$(arg veh)"/>
        <arg name="param_file_name" value="$(arg param_file_name)"/>
    </include>

    <!-- Path Planning -->
	<include file="$(find parking)/launch/path_planning_node.launch">
        <arg name="veh" value="$(arg veh)"/>
	 	<arg name="end_space" value="$(arg end_space)"/>
 	</include>

    <!-- Control -->

    <!-- Start Wheels -->
    <group if="$(arg wheels)">

        <remap from="inverse_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd" />
        <remap from="inverse_kinematics_node/car_cmd" to="car_cmd_switch_node/cmd"/>
        <remap from="inverse_kinematics_node/actuator_limits_received" to="lane_controller_node/actuator_limits_received" />
        <remap from="wheels_driver_node/radius_limit" to="lane_controller_node/radius_limit" />
        <include file="$(find dagu_car)/launch/inverse_kinematics_node.launch">
            <arg name="veh" value="$(arg veh)"/>
        </include>

        <!-- Wheel Driver -->
        <include file="$(find dagu_car)/launch/wheels_driver_node.launch">
            <arg name="veh" value="$(arg veh)"/>
        </include>

     
    </group>

    <!-- End Wheels -->

    <group if="$(arg odometry)">
        <group if="$(arg /odometry/forward_kinematics)">
                <remap from="forward_kinematics_node/wheels_cmd" to="wheels_driver_node/wheels_cmd_executed" />
                <include file="$(find dagu_car)/launch/forward_kinematics_node.launch">
                    <arg name="veh" value="$(arg veh)"/>
                    <arg name="config" value="$(arg config)"/>
                </include>
                <!-- run the velocity_to_pose_node -->
                <remap from="velocity_to_pose_node/velocity" to="forward_kinematics_node/velocity" />
                <include file="$(find dagu_car)/launch/velocity_to_pose_node.launch">
                    <arg name="veh" value="$(arg veh)"/>
                    <arg name="config" value="$(arg config)"/>
                </include>
        </group>
    </group>


    <!-- Start Joystick -->
    <group if="$(arg joystick)">
        <!-- joy -->
        <include file="$(find joy_mapper)/launch/joy_node.launch">
            <arg name="veh" value="$(arg veh)"/>
            <arg name="config" value="$(arg config)"/>
            <arg name="param_file_name" value="$(arg param_file_name)"/>
        </include>

        <!-- joy_mapper -->
        <include file="$(find joy_mapper)/launch/joy_mapper_node.launch">
            <arg name="veh" value="$(arg veh)"/>
            <arg name="config" value="$(arg config)"/>
            <arg name="param_file_name" value="$(arg param_file_name)"/>
        </include>
    </group>
    <!-- End Joystick -->

    <!-- Start FSM -->
    <group if="$(arg fsm)">
        <!-- FSM -->
        <!-- no remapping for FSM - full topic names specified in params yaml -->
        <include file="$(find fsm)/launch/fsm_node.launch">
            <arg name="veh" value="$(arg veh)"/>        
            <arg name="config" value="$(arg config)"/>        
            <arg name="param_file_name" value="$(arg fsm_file_name)"/>        
        </include>

        <!-- car_cmd_switch_node -->
        <!-- no remappings for car_cmd_switch - full topic names specified in params yaml -->
        <remap from="car_cmd_switch_node/cmd_lane_following" to="lane_controller_node/lane_control"/> 
        <!-- need either lots more of these or none of these -->
        <include file="$(find dagu_car)/launch/car_cmd_switch_node.launch">
            <arg name="veh" value="$(arg veh)"/>
            <arg name="config" value="$(arg config)"/>
            <arg name="param_file_name" value="$(arg param_file_name)"/>
        </include>

        <include file="$(find fsm)/launch/logic_gate_node.launch">
            <arg name="veh" value="$(arg veh)"/>
            <arg name="config" value="$(arg config)"/>
            <arg name="param_file_name" value="$(arg param_file_name)"/>
        </include>
    </group>

    <!--End FSM -->

    <!-- Start Lane Following -->
    <group if="$(arg lane_following)">

        <!-- Line Detector -->
        <group if="$(arg /lane_following/line_detection)">
            <remap from="line_detector_node/image" to="camera_node/image/compressed"/>
            <remap from="line_detector_node/transform" to="anti_instagram_node/transform"/>
            <remap from="line_detector_node/fsm_mode" to="fsm_node/mode" />
            <include file="$(find line_detector)/launch/line_detector_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="config" value="$(arg config)"/>
                <!-- NOTE: "line_detector_param_file_name" as special case -->
                <arg name="param_file_name" value="$(arg line_detector_param_file_name)"/>
                <arg name="verbose" value="$(arg verbose)" />
            </include>  
        </group>
        
        <!-- Ground projection -->
        <group if="$(arg /lane_following/ground_projection)">
            <include file="$(find ground_projection)/launch/ground_projection.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="config" value="$(arg config)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
            <group if="$(arg visualization)">
              <remap from="duckiebot_visualizer/segment_list" to="ground_projection/lineseglist_out"/>
              <include file="$(find duckiebot_visualizer)/launch/duckiebot_visualizer.launch">
                <arg name="veh" value="$(arg veh)" />
              </include>
            </group>
        </group>
    
        <!-- Lane Filter -->
        <group if="$(arg /lane_following/lane_filter)">
          <remap from="lane_filter_node/segment_list" to="ground_projection/lineseglist_out"/>
          <remap from="lane_filter_node/car_cmd" to="car_cmd_switch_node/cmd"/>
          <remap from="lane_filter_node/fsm_mode" to="fsm_node/mode" />
            <include file="$(find lane_filter)/launch/lane_filter_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="config" value="$(arg config)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
        </group>

        <!-- Stop Line Filter -->
        <group if="$(arg /lane_following/stop_line_filter)">      
            <remap from="stop_line_filter_node/lanewidth" to="lane_filter_node/lanewidth"/>
            <remap from="stop_line_filter_node/lane_pose" to="lane_filter_node/lane_pose"/>
            <remap from="stop_line_filter_node/segment_list" to="ground_projection/lineseglist_out"/>
            <include file="$(find stop_line_filter)/launch/stop_line_filter_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="config" value="$(arg config)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>
            </include>
        </group>

        <!-- Lane controller -->
        <group if="$(arg /lane_following/lane_controller)">
            <remap from="lane_controller_node/lane_pose" to="lane_filter_node/lane_pose"/>
            <remap from="lane_controller_node/wheels_cmd_executed" to="wheels_driver_node/wheels_cmd_executed" />
            <remap from="lane_controller_node/fsm_mode" to="fsm_node/mode" />
            <remap from="lane_controller_node/actuator_limits" to="inverse_kinematics_node/actuator_limits" />
            <remap from="lane_controller_node/obstacle_avoidance_pose" to="obst_avoid/obstacle_avoidance_pose" />
            <remap from="lane_controller_node/obstacle_detected" to="obstacle_avoidance_active_flag" />
            <include file="$(find lane_control)/launch/lane_controller_node.launch">
                <arg name="veh" value="$(arg veh)"/>
                <arg name="config" value="$(arg config)"/>
                <arg name="param_file_name" value="$(arg param_file_name)"/>        
            </include>
        </group>

        <!-- Visualization -->
        <group if="$(arg visualization)">
            <include file="$(find lane_filter)/launch/lane_pose_visualizer_node.launch">
                <arg name="veh" value="$(arg veh)"/>        
            </include>
        </group>

    </group>
    <!-- End Lane Control -->

	<!-- Run a static transform to test with -->
    <node pkg="tf" type="static_transform_publisher" name="test_tag_128_broadcaster" args="0 0 0 0 0 0 world tag_128 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_126_broadcaster" args="0 -0.2 0 0 0 0 world tag_126 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_131_broadcaster" args="1 -0.1 0 0 0 0 world tag_131 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_125_broadcaster" args="0 0 0 0 0 0 world tag_125 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_132_broadcaster" args="0 0 0 0 0 0 world tag_132 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_133_broadcaster" args="0 0 0 0 0 0 world tag_133 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_134_broadcaster" args="0 0 0 0 0 0 world tag_134 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_135_broadcaster" args="0 0 0 0 0 0 world tag_135 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_136_broadcaster" args="0 0 0 0 0 0 world tag_136 100"/>
    <node pkg="tf" type="static_transform_publisher" name="test_tag_137_broadcaster" args="0 0 0 0 0 0 world tag_137 100"/>

</launch>
