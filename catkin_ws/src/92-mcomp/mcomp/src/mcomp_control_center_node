#!/usr/bin/env python

import sys
import lcm
import json
import pickle
import rospy
import numpy as np
import utils
import datetime
from utils import stdout
from time import sleep
from threading import Thread
from mcomp.srv import MCompStopExperiment
from lcm_types.mcomp_msgs import configuration_msg, experiment_log_msg, auto_pilot_msg
from visualization_msgs.msg import Marker
from log_types import MSG_TYPE

verbose = False
lcm_handler = None
mcomp_viz_pub = None
mcomp_configuration = None
mcomp_configuration_json = None
experiment_config_channel = "MCOMP_SETUP"
experiment_car_control_channel = "MCOMP_AUTO_PILOT"
experiment_log_channel = "MCOMP_LOG"
experiment_started = False
experiment_completed = False
experiment_interrupted = False
experiment_log = []
num_vehicles = 9999
vehicles_configured = set()
experiment_start_time = -1
log_dir = '/home/duckietown/mcomp_logs'

colors = {
	'red' : [1,0,0, 1],
	'green' : [0,1,0, 1],
	'blue' : [0,0,1,  1],
	'yellow' : [1,1,0, 1]
}

mcomp_viz_buffer = {}
events_cnt = 0


def viz_shape(parent_frame, shape_id, loc, scale, color, ns="mcomp", viz_id=0, alpha=None):
	global colors
	alpha_val = colors[color][3]
	if alpha is not None:
		alpha_val = alpha
	# create marker msg
	m = Marker()
	m.header.frame_id = parent_frame
	m.header.stamp = rospy.Time.now()
	m.ns = ns
	m.id = viz_id
	m.type = shape_id
	m.action = 0
	m.pose.position.x = loc[0]
	m.pose.position.y = loc[1]
	m.pose.position.z = loc[2]
	m.pose.orientation.x = 0
	m.pose.orientation.y = 0
	m.pose.orientation.z = 0
	m.pose.orientation.w = 1
	m.scale.x = scale[0]
	m.scale.y = scale[1]
	m.scale.z = scale[2]
	m.color.a = alpha_val
	m.color.r = colors[color][0]
	m.color.g = colors[color][1]
	m.color.b = colors[color][2]
	# publish marker
	mcomp_viz_buffer[ "%s_%d" % (ns, viz_id) ] = m

def viz_cube(parent_frame, loc, scale, color, ns="mcomp", viz_id=0, alpha=None):
	return viz_shape(parent_frame, 1, loc, scale, color, ns, viz_id, alpha)

def viz_cylinder(parent_frame, loc, scale, color, ns="mcomp", viz_id=0, alpha=None):
	return viz_shape(parent_frame, 3, loc, scale, color, ns, viz_id, alpha)

def viz_bot_configured(botname):
	h = 0.15
	s = 0.04
	return viz_cube(
		"/%s/duckiebot" % botname,
		[0, 0, h],
		[s, s, s],
		'yellow',
		botname,
		0
	)

def viz_bot_moving(botname):
	h = 0.15
	s = 0.04
	return viz_cube(
		"/%s/duckiebot" % botname,
		[0, 0, h+s],
		[s, s, s],
		'green',
		botname,
		1
	)

def viz_bot_stopped(botname):
	h = 0.15
	s = 0.04
	return viz_cube(
		"/%s/duckiebot" % botname,
		[0, 0, h+s],
		[s, s, s],
		'red',
		botname,
		1
	)

def viz_event(event_location, sender_location):
	global events_cnt, mcomp_configuration
	viz_cylinder(
		"/world",
		[event_location[0], event_location[1], 0.01],
		[0.2, 0.2, 0.1],
		'red',
		'event',
		events_cnt
	)
	viz_cylinder(
		"/world",
		[sender_location[0], sender_location[1], 0.01],
		[0.2, 0.2, 0.1],
		'yellow',
		'event',
		events_cnt
	)
	viz_cylinder(
		"/world",
		[sender_location[0], sender_location[1], 0.01],
		[
			float(mcomp_configuration['communication_radius'])*2.0,
			float(mcomp_configuration['communication_radius'])*2.0,
			0.04
		],
		'blue',
		'event_cr',
		events_cnt,
		0.3
	)
	events_cnt = events_cnt + 1

def viz_bot_warned(botname):
	viz_cylinder(
		"/%s/duckiebot" % botname,
		[0, 0, 0.01],
		[0.2, 0.2, 0.1],
		'yellow',
		'%s_bot_warn' % botname,
		0,
		0.4
	)

def terminate_experiment_svc(req):
	global experiment_completed, experiment_log, experiment_start_time, log_dir,  mcomp_configuration
	# received termination request
	stdout('Experiment Status', 'Received signal to terminate experiment. Waiting for the process to finish...')
	experiment_completed = True
	sleep(4)
	stdout('Experiment Status', 'Completed!')
	# save log to file
	now_str = datetime.datetime.now().strftime("%m_%Y_%d_h%H_m%M")
	cur_log_dir = "%s/%s" % ( log_dir, now_str )
	descriptor_file = "%s/%s" % ( cur_log_dir, "meta.json" )
	data_file = "%s/%s" % ( cur_log_dir, "data.dat" )
	# create log dir
	os.makedirs(cur_log_dir)
	# write to file
	with open(descriptor_file, 'w') as out_file:
		json.dump( mcomp_configuration, out_file )
	with open(data_file, 'w') as out_file:
		pickle.dump( experiment_log, out_file )
	# close
	experiment_dur = float(utils.now() - experiment_start_time) / 1000.0
	experiment_n_msgs = len( experiment_log )
	stdout(
		'Experiment Status', 'Name: %s  |  Length: %s' % (
			now_str,
			'%s secs (%d messages)' % ( experiment_dur, experiment_n_msgs )
		)
	)
	exit(0)


def mcomp_log_msg_handler(channel, data):
	global verbose
	global experiment_started, vehicles_configured
	msg = experiment_log_msg.decode(data)

	if msg.type != 20:
		print MSG_TYPE(msg.type)

	if verbose:
		stdout('LCM (verbose)', 'Message received, Type: `%s`!' % MSG_TYPE(msg.type) )
		stdout('STATUS (verbose)', 'Experiment started: %r' % experiment_started )

	# ignore message if the experiment has not started yet
	if not experiment_started and msg.type != MSG_TYPE.CONFIGURATION_SENT:
		return
	# ignore message if the experiment is completed
	if experiment_completed:
		return
	# start experiment
	if msg.type == MSG_TYPE.CONFIGURATION_SENT:
		experiment_log.append(
			( utils.now(), msg )
		)
		experiment_started = True
		experiment_start_time = utils.now()
		return
	# count number of configured vehicles
	if msg.type == MSG_TYPE.CONFIGURATION_RECEIVED:
		vehicles_configured.add( msg.vehicle )
		print '`%s` confirmed configuration' % msg.vehicle
		# show that the bot is configured
		viz_bot_configured( msg.vehicle )

	if msg.type == MSG_TYPE.VEHICLE_RELEASED:
		viz_bot_moving( msg.vehicle )
	if msg.type == MSG_TYPE.VEHICLE_STOPPED:
		viz_bot_stopped( msg.vehicle )

	if msg.type == MSG_TYPE.EVENT_GENERATED:
		viz_event( msg.location, msg.vehicle_location )
	if msg.type == MSG_TYPE.EVENT_RECEIVED:
		viz_bot_warned( msg.vehicle )


	# log
	experiment_log.append(
		( utils.now(), msg )
	)

def experiment_director_fcn(arg):
	global lcm_handler, experiment_log_channel, mcomp_configuration_json, experiment_car_control_channel
	global num_vehicles, vehicles_configured, experiment_started, experiment_completed, experiment_interrupted
	if experiment_completed: return

	# send configuration message
	stdout('Configuration Sender', 'Sending configuration to vehicles...')
	config_msg = configuration_msg()
	config_msg.timestamp = utils.now()
	config_msg.configuration = mcomp_configuration_json
	utils.publish( lcm_handler, experiment_config_channel, configuration_msg.encode(config_msg) )
	stdout('Configuration Sender', 'Configuration sent!')
	if experiment_completed: return

	# send confirmation message to start logging
	msg = experiment_log_msg()
	msg.timestamp = utils.now()
	msg.type = MSG_TYPE.CONFIGURATION_SENT
	msg.content = mcomp_configuration_json
	utils.publish( lcm_handler, experiment_log_channel, experiment_log_msg.encode(msg) )
	if experiment_completed: return

	# wait for vehicles to receive configuration message
	stdout('Configuration Checker', 'Waiting for the vehicles to be configured')
	while num_vehicles != len(vehicles_configured):
		if experiment_interrupted: return
		sleep(0.5)
	stdout('Configuration Checker', 'Vehicles configured for flight!')
	if experiment_completed: return

	# activate Auto-Pilot
	stdout('Auto-Pilot', 'Activating...')
	msg = auto_pilot_msg()
	msg.timestamp = utils.now()
	msg.enabled = True
	utils.publish( lcm_handler, experiment_car_control_channel, auto_pilot_msg.encode(msg) )
	stdout('Auto-Pilot', 'Activated!')
	if experiment_completed: return

def ros_spinner_fcn(args):
	service = rospy.Service('~stop_experiment', MCompStopExperiment, terminate_experiment_svc)
	rospy.spin()

def viz_thread_fcn(args):
	global experiment_completed, experiment_interrupted, mcomp_viz_buffer, mcomp_viz_pub
	while not experiment_completed and not experiment_interrupted:
		for _, m in mcomp_viz_buffer.items():
			m.header.seq = m.header.seq+1
			m.header.stamp = rospy.Time.now()
			mcomp_viz_pub.publish( m )
			sleep(0.05)


if __name__ == '__main__':
	# set up ROS publishing node
	rospy.init_node('mcomp_control_center_node')

	# get parameters
	event_location = eval(rospy.get_param('~event_location'))
	communication_radius = rospy.get_param('~communication_radius')
	reaction_radius = rospy.get_param('~reaction_radius')
	allow_propagation = rospy.get_param('~allow_propagation')
	interference_model = rospy.get_param('~interference_model')
	reaction_type = rospy.get_param('~reaction_type')
	num_vehicles = rospy.get_param('~num_vehicles')
	perception_distance = rospy.get_param('~perception_distance')

	# create experiment configuration
	mcomp_configuration = {
		'event_location' : event_location,
		'communication_radius' : communication_radius,
		'reaction_radius' : reaction_radius,
		'allow_propagation' : allow_propagation,
		'interference_model' : interference_model,
		'reaction_type' : reaction_type,
		'perception_distance' : perception_distance
	}
	mcomp_configuration_json = json.dumps( mcomp_configuration )

	# initialize LCM
	lcm_handler = lcm.LCM()

	# create ROS publisher
	mcomp_viz_pub = rospy.Publisher( "/mcomp/visualization", Marker, queue_size=10 )

	# start listening to other vehicles messages
	mcomp_log_sub = lcm_handler.subscribe(experiment_log_channel, mcomp_log_msg_handler)

	# start ROS spinners
	ros_spinner = Thread( target=ros_spinner_fcn, args=(None,) )
	ros_spinner.start()
	ros_viz_th = Thread( target=viz_thread_fcn, args=(None,) )
	ros_viz_th.start()

	# wait for the listener to be ready
	sleep(1)

	# start experiment
	experiment_director = Thread( target=experiment_director_fcn, args=(None,) )
	experiment_director.start()

	# keep spinning
	try:
		while True:
			lcm_handler.handle()
	except KeyboardInterrupt:
		pass
	finally:
		experiment_interrupted = True
		ros_spinner.join()
		experiment_director.join()
		ros_viz_th.join()
