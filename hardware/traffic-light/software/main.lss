
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000008ac  00000940  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013e  00800060  00800060  00000940  2**0
                  ALLOC
  3 .stab         000019d4  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000109f  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000033c4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	e6 c0       	rjmp	.+460    	; 0x1dc <__vector_7>
  10:	f7 c0       	rjmp	.+494    	; 0x200 <__vector_8>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	00 00       	nop
  28:	ff 00       	.word	0x00ff	; ????

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	21 e0       	ldi	r18, 0x01	; 1
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	ae 39       	cpi	r26, 0x9E	; 158
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	5d d2       	rcall	.+1210   	; 0x502 <main>
  48:	2f c4       	rjmp	.+2142   	; 0x8a8 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <getValue>:
{
	ws2812_sendarray(led_data, N_LEDS * 3);
}

static inline char getValue(int Addr)
{
  4c:	cf 92       	push	r12
  4e:	df 92       	push	r13
  50:	ef 92       	push	r14
  52:	ff 92       	push	r15
  54:	cf 93       	push	r28
  56:	df 93       	push	r29
	uint16_t iOn=0;
	uint16_t iOff=0;
	
	iOn=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
  58:	dc 01       	movw	r26, r24
  5a:	ac 59       	subi	r26, 0x9C	; 156
  5c:	bf 4f       	sbci	r27, 0xFF	; 255
  5e:	6c 91       	ld	r22, X
  60:	fc 01       	movw	r30, r24
  62:	eb 59       	subi	r30, 0x9B	; 155
  64:	ff 4f       	sbci	r31, 0xFF	; 255
  66:	80 81       	ld	r24, Z
	iOff=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
  68:	cc 91       	ld	r28, X
  6a:	d0 81       	ld	r29, Z
static inline char getValue(int Addr)
{
	uint16_t iOn=0;
	uint16_t iOff=0;
	
	iOn=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
  6c:	70 e0       	ldi	r23, 0x00	; 0
  6e:	76 2f       	mov	r23, r22
  70:	66 27       	eor	r22, r22
  72:	68 0f       	add	r22, r24
  74:	71 1d       	adc	r23, r1
	iOff=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
	
	//return (char) (((uint32_t)iOn)<<8)/((uint32_t)iOff);
	return (char) ((float)iOn/iOff*255);
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	1d d3       	rcall	.+1594   	; 0x6b6 <__floatunsisf>
  7c:	6b 01       	movw	r12, r22
  7e:	7c 01       	movw	r14, r24
{
	uint16_t iOn=0;
	uint16_t iOff=0;
	
	iOn=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
	iOff=(i2c_reg[Addr]<<8) + i2c_reg[Addr+1];
  80:	8c 2f       	mov	r24, r28
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	98 2f       	mov	r25, r24
  86:	88 27       	eor	r24, r24
  88:	8d 0f       	add	r24, r29
  8a:	91 1d       	adc	r25, r1
	
	//return (char) (((uint32_t)iOn)<<8)/((uint32_t)iOff);
	return (char) ((float)iOn/iOff*255);
  8c:	bc 01       	movw	r22, r24
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	11 d3       	rcall	.+1570   	; 0x6b6 <__floatunsisf>
  94:	9b 01       	movw	r18, r22
  96:	ac 01       	movw	r20, r24
  98:	c7 01       	movw	r24, r14
  9a:	b6 01       	movw	r22, r12
  9c:	78 d2       	rcall	.+1264   	; 0x58e <__divsf3>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	4f e7       	ldi	r20, 0x7F	; 127
  a4:	53 e4       	ldi	r21, 0x43	; 67
  a6:	95 d3       	rcall	.+1834   	; 0x7d2 <__mulsf3>
  a8:	da d2       	rcall	.+1460   	; 0x65e <__fixunssfsi>
  aa:	86 2f       	mov	r24, r22
	
	//uint32_t temp=iOn;
	//temp=temp*255;
	//temp=temp/iOff;
	//return (char)temp;
}
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	08 95       	ret

000000ba <do_reset>:
void do_reset(void)
{
	char i = N_LEDS * 3;
	volatile uint8_t *p = i2c_reg + I2C_N_GLB_REG;

	cli();
  ba:	f8 94       	cli
	REG_GLB_G = 0;
  bc:	10 92 65 00 	sts	0x0065, r1
	REG_GLB_R = 0;
  c0:	10 92 66 00 	sts	0x0066, r1
	REG_GLB_B = 0;
  c4:	10 92 67 00 	sts	0x0067, r1
	ws2812_setleds_constant((struct cRGB *)&REG_GLB_G, N_LEDS);
  c8:	64 e1       	ldi	r22, 0x14	; 20
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	85 e6       	ldi	r24, 0x65	; 101
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	64 d1       	rcall	.+712    	; 0x39a <ws2812_setleds_constant>
	REG_GLB_G = pgm_read_byte(init_color);
  d2:	e6 e2       	ldi	r30, 0x26	; 38
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	e4 91       	lpm	r30, Z
  d8:	e0 93 65 00 	sts	0x0065, r30
	REG_GLB_R = pgm_read_byte(init_color + 1);
  dc:	e7 e2       	ldi	r30, 0x27	; 39
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e4 91       	lpm	r30, Z
  e2:	e0 93 66 00 	sts	0x0066, r30
	REG_GLB_B = pgm_read_byte(init_color + 2);
  e6:	e8 e2       	ldi	r30, 0x28	; 40
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e4 91       	lpm	r30, Z
  ec:	e0 93 67 00 	sts	0x0067, r30
	REG_CTRL = 0;
  f0:	10 92 64 00 	sts	0x0064, r1

	/* Reset the registers or we'll just go back to the old values! */
	while (i--) {
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	e8 59       	subi	r30, 0x98	; 152
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	8d 33       	cpi	r24, 0x3D	; 61
 102:	91 05       	cpc	r25, r1
 104:	11 f0       	breq	.+4      	; 0x10a <do_reset+0x50>
		*p = 0;
 106:	10 82       	st	Z, r1
 108:	f7 cf       	rjmp	.-18     	; 0xf8 <do_reset+0x3e>
		p++;
	}

	sei();
 10a:	78 94       	sei
 10c:	08 95       	ret

0000010e <swirly>:
}

void swirly(void)
{
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
	uint8_t led = N_LEDS;
	volatile uint8_t *p = led_data + (N_LEDS * 3);//i2c_reg + I2C_N_GLB_REG + (N_LEDS * 3);
	uint8_t g = pgm_read_byte(init_color);
 116:	46 e2       	ldi	r20, 0x26	; 38
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	fa 01       	movw	r30, r20
 11c:	a4 91       	lpm	r26, Z
	uint8_t r = pgm_read_byte(init_color + 1);
 11e:	27 e2       	ldi	r18, 0x27	; 39
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	b4 91       	lpm	r27, Z
	uint8_t b = pgm_read_byte(init_color + 2);
 126:	68 e2       	ldi	r22, 0x28	; 40
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	fb 01       	movw	r30, r22
 12c:	14 91       	lpm	r17, Z
}

void swirly(void)
{
	uint8_t led = N_LEDS;
	volatile uint8_t *p = led_data + (N_LEDS * 3);//i2c_reg + I2C_N_GLB_REG + (N_LEDS * 3);
 12e:	8e e9       	ldi	r24, 0x9E	; 158
 130:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t tmp;

	/* Initialise a bright spot with a tail:
	 * { 255, 127, 63, 31, 15, 15, 15, 15 ... }
	 */
	while (led--) {
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	82 36       	cpi	r24, 0x62	; 98
 136:	9f 07       	cpc	r25, r31
 138:	b9 f0       	breq	.+46     	; 0x168 <swirly+0x5a>
		*(--p) = b;
 13a:	ec 01       	movw	r28, r24
 13c:	21 97       	sbiw	r28, 0x01	; 1
 13e:	18 83       	st	Y, r17
		if (b & 0xf0)
 140:	f1 2f       	mov	r31, r17
 142:	f0 7f       	andi	r31, 0xF0	; 240
 144:	09 f0       	breq	.+2      	; 0x148 <swirly+0x3a>
			b >>= 1;
 146:	16 95       	lsr	r17

		*(--p) = r;
 148:	ec 01       	movw	r28, r24
 14a:	22 97       	sbiw	r28, 0x02	; 2
 14c:	b8 83       	st	Y, r27
		if (r & 0xf0)
 14e:	fb 2f       	mov	r31, r27
 150:	f0 7f       	andi	r31, 0xF0	; 240
 152:	09 f0       	breq	.+2      	; 0x156 <swirly+0x48>
			r >>= 1;
 154:	b6 95       	lsr	r27
 156:	ec 01       	movw	r28, r24
 158:	23 97       	sbiw	r28, 0x03	; 3

		*(--p) = g;
 15a:	a8 83       	st	Y, r26
		if (g & 0xf0)
 15c:	fa 2f       	mov	r31, r26
 15e:	f0 7f       	andi	r31, 0xF0	; 240
 160:	09 f0       	breq	.+2      	; 0x164 <swirly+0x56>
			g >>= 1;
 162:	a6 95       	lsr	r26

	sei();
}

void swirly(void)
{
 164:	ce 01       	movw	r24, r28
 166:	e5 cf       	rjmp	.-54     	; 0x132 <swirly+0x24>
			g >>= 1;

	}

	/* Shuffle the bright spot along */
	g = pgm_read_byte(init_color);
 168:	fa 01       	movw	r30, r20
 16a:	d4 91       	lpm	r29, Z
	r = pgm_read_byte(init_color + 1);
 16c:	f9 01       	movw	r30, r18
 16e:	c4 91       	lpm	r28, Z
	b = pgm_read_byte(init_color + 2);
 170:	fb 01       	movw	r30, r22
 172:	14 91       	lpm	r17, Z
	ws2812_setleds_constant((struct cRGB *)&REG_GLB_G, N_LEDS);
}

static inline void update_leds(void)
{
	ws2812_sendarray(led_data, N_LEDS * 3);
 174:	6c e3       	ldi	r22, 0x3C	; 60
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	82 e6       	ldi	r24, 0x62	; 98
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	c0 d1       	rcall	.+896    	; 0x4fe <ws2812_sendarray>
	while (1)
	{
		update_leds();

		led = N_LEDS;
		p = &i2c_reg[I2C_N_GLB_REG];
 17e:	a8 e6       	ldi	r26, 0x68	; 104
 180:	b0 e0       	ldi	r27, 0x00	; 0
	b = pgm_read_byte(init_color + 2);
	while (1)
	{
		update_leds();

		led = N_LEDS;
 182:	84 e1       	ldi	r24, 0x14	; 20
		p = &i2c_reg[I2C_N_GLB_REG];
		while (led--) {
 184:	81 50       	subi	r24, 0x01	; 1
 186:	c0 f0       	brcs	.+48     	; 0x1b8 <swirly+0xaa>
			tmp = *p;
 188:	9c 91       	ld	r25, X
			*(p++) = g;
 18a:	dc 93       	st	X, r29
			if (led)
 18c:	81 11       	cpse	r24, r1
				g = tmp;
 18e:	d9 2f       	mov	r29, r25

			tmp = *p;
 190:	11 96       	adiw	r26, 0x01	; 1
 192:	9c 91       	ld	r25, X
 194:	11 97       	sbiw	r26, 0x01	; 1
			*(p++) = r;
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	cc 93       	st	X, r28
 19a:	11 97       	sbiw	r26, 0x01	; 1
			if (led)
 19c:	81 11       	cpse	r24, r1
				r = tmp;
 19e:	c9 2f       	mov	r28, r25

			tmp = *p;
 1a0:	12 96       	adiw	r26, 0x02	; 2
 1a2:	9c 91       	ld	r25, X
 1a4:	12 97       	sbiw	r26, 0x02	; 2
 1a6:	9d 01       	movw	r18, r26
 1a8:	2d 5f       	subi	r18, 0xFD	; 253
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
			*(p++) = b;
 1ac:	12 96       	adiw	r26, 0x02	; 2
 1ae:	1c 93       	st	X, r17
			if (led)
 1b0:	81 11       	cpse	r24, r1
				b = tmp;
 1b2:	19 2f       	mov	r17, r25
 1b4:	d9 01       	movw	r26, r18
 1b6:	e6 cf       	rjmp	.-52     	; 0x184 <swirly+0x76>
	{
		update_leds();

		led = N_LEDS;
		p = &i2c_reg[I2C_N_GLB_REG];
		while (led--) {
 1b8:	07 e4       	ldi	r16, 0x47	; 71
 1ba:	01 50       	subi	r16, 0x01	; 1
				b = tmp;
		}

		/* As soon as there's a transaction to handle, bail out */
		tmp = 70;
		while (tmp--) {
 1bc:	d9 f2       	breq	.-74     	; 0x174 <swirly+0x66>
			if (i2c_check_stop())
 1be:	c9 d0       	rcall	.+402    	; 0x352 <i2c_check_stop>
 1c0:	81 11       	cpse	r24, r1
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <swirly+0xc4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f ec       	ldi	r24, 0xCF	; 207
 1c6:	97 e0       	ldi	r25, 0x07	; 7
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <swirly+0xba>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <swirly+0xc0>
 1ce:	00 00       	nop
 1d0:	f4 cf       	rjmp	.-24     	; 0x1ba <swirly+0xac>
				return;
			_delay_ms(1);
		}
	}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <__vector_7>:
#elif defined(USI_STRT_vect)
ISR(USI_STRT_vect)
#else
#error "Couldn't figure out what i2c start interrupt to use!"
#endif
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
	i2c_state = 0;
 1e8:	10 92 61 00 	sts	0x0061, r1
	while (PINB & (1 << I2C_SCL));
 1ec:	b2 99       	sbic	0x16, 2	; 22
 1ee:	fe cf       	rjmp	.-4      	; 0x1ec <__vector_7+0x10>
	USISR = 0xF0;
 1f0:	80 ef       	ldi	r24, 0xF0	; 240
 1f2:	8e b9       	out	0x0e, r24	; 14
}
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_8>:
#elif defined(USI_OVF_vect)
ISR(USI_OVF_vect)
#else
#error "Couldn't figure out what i2c overflow interrupt to use!"
#endif
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	/* Writing USISR directly has side effects! */
	uint8_t usisr_tmp = 0xD0;
	uint8_t sda_direction;
	uint8_t tmp;

	if (!post_ack) {
 214:	80 91 63 00 	lds	r24, 0x0063
 218:	81 11       	cpse	r24, r1
 21a:	50 c0       	rjmp	.+160    	; 0x2bc <__stack+0x5d>
		/* Work that needs to be done before the ACK cycle */
		sda_direction = I2C_SDA_DIR_OUT;

		switch (i2c_state) {
 21c:	80 91 61 00 	lds	r24, 0x0061
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	89 f1       	breq	.+98     	; 0x286 <__stack+0x27>
 224:	00 f1       	brcs	.+64     	; 0x266 <__stack+0x7>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	e1 f1       	breq	.+120    	; 0x2a2 <__stack+0x43>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	09 f0       	breq	.+2      	; 0x230 <__vector_8+0x30>
 22e:	3e c0       	rjmp	.+124    	; 0x2ac <__stack+0x4d>
#else
			tmp = i2c_w_mask[i2c_offset];
#endif
			if (tmp) {
				/* Only heed writeable bits */
				i2c_reg[i2c_offset] &= ~tmp;
 230:	e0 91 60 00 	lds	r30, 0x0060
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ec 59       	subi	r30, 0x9C	; 156
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	80 81       	ld	r24, Z
 23c:	10 82       	st	Z, r1
				i2c_reg[i2c_offset] |= USIDR & tmp;
 23e:	8f b1       	in	r24, 0x0f	; 15
 240:	e0 91 60 00 	lds	r30, 0x0060
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ec 59       	subi	r30, 0x9C	; 156
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	90 81       	ld	r25, Z
 24c:	89 2b       	or	r24, r25
 24e:	80 83       	st	Z, r24
			}
			i2c_update++;
 250:	80 91 62 00 	lds	r24, 0x0062
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 62 00 	sts	0x0062, r24
			i2c_offset++;
 25a:	80 91 60 00 	lds	r24, 0x0060
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 60 00 	sts	0x0060, r24
 264:	21 c0       	rjmp	.+66     	; 0x2a8 <__stack+0x49>
		/* Work that needs to be done before the ACK cycle */
		sda_direction = I2C_SDA_DIR_OUT;

		switch (i2c_state) {
		case I2C_STATE_ADDR_MATCH:
			tmp = USIDR >> 1;
 266:	8f b1       	in	r24, 0x0f	; 15
 268:	86 95       	lsr	r24
			if (tmp && (tmp != I2C_SLAVE_ADDR)) {
 26a:	8f 7b       	andi	r24, 0xBF	; 191
 26c:	79 f4       	brne	.+30     	; 0x28c <__stack+0x2d>
				/* Transition h */
				i2c_state = I2C_STATE_IDLE;
				NAK();
			} else {
				if (USIDR & 1) {
 26e:	78 9b       	sbis	0x0f, 0	; 15
 270:	02 c0       	rjmp	.+4      	; 0x276 <__stack+0x17>
					/* Transition b */
					i2c_state = I2C_STATE_MASTER_READ;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	13 c0       	rjmp	.+38     	; 0x29c <__stack+0x3d>
				} else {
					/* Transition a */
					i2c_offset = 0;
 276:	10 92 60 00 	sts	0x0060, r1
					i2c_state = I2C_STATE_REG_ADDR;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 61 00 	sts	0x0061, r24
					i2c_update = 1;
 280:	80 93 62 00 	sts	0x0062, r24
 284:	11 c0       	rjmp	.+34     	; 0x2a8 <__stack+0x49>
				}
				ACK();
			}
			break;
		case I2C_STATE_REG_ADDR:
			if (USIDR > (I2C_N_REG - 1)) {
 286:	8f b1       	in	r24, 0x0f	; 15
 288:	8e 3f       	cpi	r24, 0xFE	; 254
 28a:	20 f0       	brcs	.+8      	; 0x294 <__stack+0x35>
				/* Transition i */
				i2c_state = I2C_STATE_IDLE;
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	80 93 61 00 	sts	0x0061, r24
 292:	0c c0       	rjmp	.+24     	; 0x2ac <__stack+0x4d>
				NAK();
			} else {
				/* Transition d */
				i2c_offset = USIDR;
 294:	8f b1       	in	r24, 0x0f	; 15
 296:	80 93 60 00 	sts	0x0060, r24
				i2c_state = I2C_STATE_MASTER_WRITE;
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	80 93 61 00 	sts	0x0061, r24
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <__stack+0x49>
				ACK();
			}
			break;
		case I2C_STATE_MASTER_READ:
			USIDR = 0;
 2a2:	1f b8       	out	0x0f, r1	; 15
			/* Listen for master NAK */
			sda_direction = I2C_SDA_DIR_IN;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
			break;
 2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <__stack+0x53>
				i2c_reg[i2c_offset] &= ~tmp;
				i2c_reg[i2c_offset] |= USIDR & tmp;
			}
			i2c_update++;
			i2c_offset++;
			ACK();
 2a8:	1f b8       	out	0x0f, r1	; 15
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__stack+0x51>
			break;
		default:
			NAK();
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	8f b9       	out	0x0f, r24	; 15
	uint8_t sda_direction;
	uint8_t tmp;

	if (!post_ack) {
		/* Work that needs to be done before the ACK cycle */
		sda_direction = I2C_SDA_DIR_OUT;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
		default:
			NAK();
		}
		/* Counter will overflow again after ACK cycle */
		usisr_tmp |= 14 << USICNT0;
		post_ack = 1;
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	90 93 63 00 	sts	0x0063, r25
			break;
		default:
			NAK();
		}
		/* Counter will overflow again after ACK cycle */
		usisr_tmp |= 14 << USICNT0;
 2b8:	9e ed       	ldi	r25, 0xDE	; 222
 2ba:	1e c0       	rjmp	.+60     	; 0x2f8 <__stack+0x99>
		post_ack = 1;
	} else {
		/* Work that needs to be done after the ACK cycle */
		sda_direction = I2C_SDA_DIR_IN;
		switch (i2c_state) {
 2bc:	80 91 61 00 	lds	r24, 0x0061
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	b1 f4       	brne	.+44     	; 0x2f0 <__stack+0x91>
		case I2C_STATE_MASTER_READ:
			if (USIDR) {
 2c4:	8f b1       	in	r24, 0x0f	; 15
 2c6:	88 23       	and	r24, r24
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <__stack+0x77>
				/* Transition e */
				i2c_offset = 0;
 2ca:	10 92 60 00 	sts	0x0060, r1
				i2c_state = I2C_STATE_IDLE;
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	80 93 61 00 	sts	0x0061, r24
 2d4:	0d c0       	rjmp	.+26     	; 0x2f0 <__stack+0x91>
			} else {
				/* Transition f */
				sda_direction = I2C_SDA_DIR_OUT;
				USIDR = i2c_reg[i2c_offset++];
 2d6:	e0 91 60 00 	lds	r30, 0x0060
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	8e 0f       	add	r24, r30
 2de:	80 93 60 00 	sts	0x0060, r24
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ec 59       	subi	r30, 0x9C	; 156
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	80 81       	ld	r24, Z
 2ea:	8f b9       	out	0x0f, r24	; 15
				/* Transition e */
				i2c_offset = 0;
				i2c_state = I2C_STATE_IDLE;
			} else {
				/* Transition f */
				sda_direction = I2C_SDA_DIR_OUT;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <__stack+0x93>
		/* Counter will overflow again after ACK cycle */
		usisr_tmp |= 14 << USICNT0;
		post_ack = 1;
	} else {
		/* Work that needs to be done after the ACK cycle */
		sda_direction = I2C_SDA_DIR_IN;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
				sda_direction = I2C_SDA_DIR_OUT;
				USIDR = i2c_reg[i2c_offset++];
			}
			break;
		}
		post_ack = 0;
 2f2:	10 92 63 00 	sts	0x0063, r1
#error "Couldn't figure out what i2c overflow interrupt to use!"
#endif
{
	static uint8_t post_ack = 0;
	/* Writing USISR directly has side effects! */
	uint8_t usisr_tmp = 0xD0;
 2f6:	90 ed       	ldi	r25, 0xD0	; 208
			break;
		}
		post_ack = 0;
	}

	if (i2c_offset > (I2C_N_REG - 1))
 2f8:	20 91 60 00 	lds	r18, 0x0060
 2fc:	2e 3f       	cpi	r18, 0xFE	; 254
 2fe:	10 f0       	brcs	.+4      	; 0x304 <__stack+0xa5>
		i2c_offset = 0;
 300:	10 92 60 00 	sts	0x0060, r1

	/* Set up SDA direction for next operation */
	if (sda_direction == I2C_SDA_DIR_OUT) {
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	11 f4       	brne	.+4      	; 0x30c <__stack+0xad>
		USI_DDR |= (1 << I2C_SDA);
 308:	d0 9a       	sbi	0x1a, 0	; 26
 30a:	01 c0       	rjmp	.+2      	; 0x30e <__stack+0xaf>
	} else {
		USI_DDR &= ~(1 << I2C_SDA);
 30c:	d0 98       	cbi	0x1a, 0	; 26
	}

	/* Clear flags and set counter */
	USISR = usisr_tmp;
 30e:	9e b9       	out	0x0e, r25	; 14
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <i2c_init>:

void i2c_init()
{
	i2c_state = 0;
 324:	10 92 61 00 	sts	0x0061, r1
	USICR = (1 << USISIE) | (1 << USIOIE) | (3 << USIWM0) | (1 << USICS1);
 328:	88 ef       	ldi	r24, 0xF8	; 248
 32a:	8d b9       	out	0x0d, r24	; 13
	USI_DDR |= (1 << I2C_SCL);
 32c:	d2 9a       	sbi	0x1a, 2	; 26
	USI_DDR &= ~(1 << I2C_SDA);
 32e:	d0 98       	cbi	0x1a, 0	; 26
	USI_PORT |= (1 << I2C_SDA) | (1 << I2C_SCL);
 330:	8b b3       	in	r24, 0x1b	; 27
 332:	85 60       	ori	r24, 0x05	; 5
 334:	8b bb       	out	0x1b, r24	; 27
	USISR = 0xF0;
 336:	80 ef       	ldi	r24, 0xF0	; 240
 338:	8e b9       	out	0x0e, r24	; 14
 33a:	08 95       	ret

0000033c <i2c_transaction_ongoing>:
}

uint8_t i2c_transaction_ongoing()
{
	if ((i2c_state != I2C_STATE_IDLE) &&
 33c:	80 91 61 00 	lds	r24, 0x0061
 340:	84 30       	cpi	r24, 0x04	; 4
 342:	29 f0       	breq	.+10     	; 0x34e <i2c_transaction_ongoing+0x12>
		(i2c_state != I2C_STATE_ADDR_MATCH)) {
 344:	90 91 61 00 	lds	r25, 0x0061
	USISR = 0xF0;
}

uint8_t i2c_transaction_ongoing()
{
	if ((i2c_state != I2C_STATE_IDLE) &&
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	91 11       	cpse	r25, r1
 34c:	01 c0       	rjmp	.+2      	; 0x350 <i2c_transaction_ongoing+0x14>
		(i2c_state != I2C_STATE_ADDR_MATCH)) {
		return 1;
	} else {
		return 0;
 34e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 350:	08 95       	ret

00000352 <i2c_check_stop>:

uint8_t i2c_check_stop()
{
	uint8_t ret = 0;

	if ((i2c_state == I2C_STATE_MASTER_WRITE) && i2c_update) {
 352:	80 91 61 00 	lds	r24, 0x0061
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	91 f4       	brne	.+36     	; 0x37e <i2c_check_stop+0x2c>
 35a:	80 91 62 00 	lds	r24, 0x0062
 35e:	88 23       	and	r24, r24
 360:	71 f0       	breq	.+28     	; 0x37e <i2c_check_stop+0x2c>
		cli();
 362:	f8 94       	cli
		uint8_t tmp = USISR;
		if (tmp & (1 << USIPF)) {
 364:	75 9b       	sbis	0x0e, 5	; 14
 366:	08 c0       	rjmp	.+16     	; 0x378 <i2c_check_stop+0x26>
			i2c_state = I2C_STATE_IDLE;
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	80 93 61 00 	sts	0x0061, r24
			ret = i2c_update;
 36e:	80 91 62 00 	lds	r24, 0x0062
			i2c_update = 0;
 372:	10 92 62 00 	sts	0x0062, r1
 376:	01 c0       	rjmp	.+2      	; 0x37a <i2c_check_stop+0x28>
	}
}

uint8_t i2c_check_stop()
{
	uint8_t ret = 0;
 378:	80 e0       	ldi	r24, 0x00	; 0
		if (tmp & (1 << USIPF)) {
			i2c_state = I2C_STATE_IDLE;
			ret = i2c_update;
			i2c_update = 0;
		}
		sei();
 37a:	78 94       	sei
 37c:	08 95       	ret
	}
}

uint8_t i2c_check_stop()
{
	uint8_t ret = 0;
 37e:	80 e0       	ldi	r24, 0x00	; 0
			i2c_update = 0;
		}
		sei();
	}
	return ret;
}
 380:	08 95       	ret

00000382 <ws2812_send_byte>:
#define w_nop16 w_nop8 w_nop8

static void inline ws2812_send_byte(uint8_t curbyte, uint8_t maskhi, uint8_t masklo)
{
    uint8_t ctr;
    asm volatile(
 382:	98 2f       	mov	r25, r24
 384:	88 e0       	ldi	r24, 0x08	; 8

00000386 <loop7>:
 386:	6b bb       	out	0x1b, r22	; 27
 388:	97 ff       	sbrs	r25, 7
 38a:	4b bb       	out	0x1b, r20	; 27
 38c:	99 0f       	add	r25, r25
 38e:	00 00       	nop
 390:	00 c0       	rjmp	.+0      	; 0x392 <loop7+0xc>
 392:	4b bb       	out	0x1b, r20	; 27
 394:	8a 95       	dec	r24
 396:	b9 f7       	brne	.-18     	; 0x386 <loop7>
 398:	08 95       	ret

0000039a <ws2812_setleds_constant>:
}

static void inline ws2812_send_byte(uint8_t curbyte, uint8_t maskhi, uint8_t masklo);

void ws2812_setleds_constant(struct cRGB *ledval, uint16_t leds)
{
 39a:	8f 92       	push	r8
 39c:	9f 92       	push	r9
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	6c 01       	movw	r12, r24
  uint8_t masklo,maskhi;
  uint8_t sreg_prev;

  maskhi = _BV(ws2812_pin);
  ws2812_DDRREG |= maskhi; // Enable output
 3b2:	d1 9a       	sbi	0x1a, 1	; 26

  masklo	=~maskhi&ws2812_PORTREG;
 3b4:	9b b3       	in	r25, 0x1b	; 27
 3b6:	9d 7f       	andi	r25, 0xFD	; 253
 3b8:	f9 2e       	mov	r15, r25
  maskhi |=        ws2812_PORTREG;
 3ba:	9b b3       	in	r25, 0x1b	; 27
 3bc:	92 60       	ori	r25, 0x02	; 2
 3be:	e9 2e       	mov	r14, r25

  sreg_prev=SREG;
 3c0:	bf b6       	in	r11, 0x3f	; 63
  cli();
 3c2:	f8 94       	cli

  while (leds--) {
 3c4:	eb 01       	movw	r28, r22
 3c6:	46 01       	movw	r8, r12
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	88 0e       	add	r8, r24
 3cc:	91 1c       	adc	r9, r1
 3ce:	20 97       	sbiw	r28, 0x00	; 0
 3d0:	61 f0       	breq	.+24     	; 0x3ea <ws2812_setleds_constant+0x50>
 3d2:	86 01       	movw	r16, r12
    uint8_t i;
    for (i = 0; i < 3; i++) {
      ws2812_send_byte(((uint8_t *)ledval)[i], maskhi, masklo);
 3d4:	4f 2d       	mov	r20, r15
 3d6:	6e 2d       	mov	r22, r14
 3d8:	f8 01       	movw	r30, r16
 3da:	81 91       	ld	r24, Z+
 3dc:	8f 01       	movw	r16, r30
 3de:	d1 df       	rcall	.-94     	; 0x382 <ws2812_send_byte>
  sreg_prev=SREG;
  cli();

  while (leds--) {
    uint8_t i;
    for (i = 0; i < 3; i++) {
 3e0:	08 15       	cp	r16, r8
 3e2:	19 05       	cpc	r17, r9
 3e4:	b9 f7       	brne	.-18     	; 0x3d4 <ws2812_setleds_constant+0x3a>
 3e6:	21 97       	sbiw	r28, 0x01	; 1
 3e8:	f2 cf       	rjmp	.-28     	; 0x3ce <ws2812_setleds_constant+0x34>
      ws2812_send_byte(((uint8_t *)ledval)[i], maskhi, masklo);
    }
  }
  SREG=sreg_prev;
 3ea:	bf be       	out	0x3f, r11	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ec:	f5 e8       	ldi	r31, 0x85	; 133
 3ee:	fa 95       	dec	r31
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <ws2812_setleds_constant+0x54>
 3f2:	00 00       	nop
  _delay_us(50);
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	bf 90       	pop	r11
 406:	9f 90       	pop	r9
 408:	8f 90       	pop	r8
 40a:	08 95       	ret

0000040c <ws2812_setleds_constant_rgbw>:

void ws2812_setleds_constant_rgbw(struct cRGBW *ledval, uint16_t leds)
{
 40c:	8f 92       	push	r8
 40e:	9f 92       	push	r9
 410:	bf 92       	push	r11
 412:	cf 92       	push	r12
 414:	df 92       	push	r13
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	6c 01       	movw	r12, r24
  uint8_t masklo,maskhi;
  uint8_t sreg_prev;

  maskhi = _BV(ws2812_pin);
  ws2812_DDRREG |= maskhi; // Enable output
 424:	d1 9a       	sbi	0x1a, 1	; 26

  masklo	=~maskhi&ws2812_PORTREG;
 426:	9b b3       	in	r25, 0x1b	; 27
 428:	9d 7f       	andi	r25, 0xFD	; 253
 42a:	f9 2e       	mov	r15, r25
  maskhi |=        ws2812_PORTREG;
 42c:	9b b3       	in	r25, 0x1b	; 27
 42e:	92 60       	ori	r25, 0x02	; 2
 430:	e9 2e       	mov	r14, r25

  sreg_prev=SREG;
 432:	bf b6       	in	r11, 0x3f	; 63
  cli();
 434:	f8 94       	cli

  while (leds--) {
 436:	eb 01       	movw	r28, r22
 438:	46 01       	movw	r8, r12
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	88 0e       	add	r8, r24
 43e:	91 1c       	adc	r9, r1
 440:	20 97       	sbiw	r28, 0x00	; 0
 442:	61 f0       	breq	.+24     	; 0x45c <ws2812_setleds_constant_rgbw+0x50>
 444:	86 01       	movw	r16, r12
    uint8_t i;
    for (i = 0; i < 4; i++) {
      ws2812_send_byte(((uint8_t *)ledval)[i], maskhi, masklo);
 446:	4f 2d       	mov	r20, r15
 448:	6e 2d       	mov	r22, r14
 44a:	f8 01       	movw	r30, r16
 44c:	81 91       	ld	r24, Z+
 44e:	8f 01       	movw	r16, r30
 450:	98 df       	rcall	.-208    	; 0x382 <ws2812_send_byte>
  sreg_prev=SREG;
  cli();

  while (leds--) {
    uint8_t i;
    for (i = 0; i < 4; i++) {
 452:	08 15       	cp	r16, r8
 454:	19 05       	cpc	r17, r9
 456:	b9 f7       	brne	.-18     	; 0x446 <ws2812_setleds_constant_rgbw+0x3a>
 458:	21 97       	sbiw	r28, 0x01	; 1
 45a:	f2 cf       	rjmp	.-28     	; 0x440 <ws2812_setleds_constant_rgbw+0x34>
      ws2812_send_byte(((uint8_t *)ledval)[i], maskhi, masklo);
    }
  }
  SREG=sreg_prev;
 45c:	bf be       	out	0x3f, r11	; 63
 45e:	f5 ed       	ldi	r31, 0xD5	; 213
 460:	fa 95       	dec	r31
 462:	f1 f7       	brne	.-4      	; 0x460 <ws2812_setleds_constant_rgbw+0x54>
 464:	00 00       	nop
  _delay_us(80);
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	df 90       	pop	r13
 474:	cf 90       	pop	r12
 476:	bf 90       	pop	r11
 478:	9f 90       	pop	r9
 47a:	8f 90       	pop	r8
 47c:	08 95       	ret

0000047e <ws2812_sendarray_mask>:
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
}

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
  uint8_t curbyte,masklo;
  uint8_t sreg_prev;

  ws2812_DDRREG |= maskhi; // Enable output
 48c:	2a b3       	in	r18, 0x1a	; 26
 48e:	24 2b       	or	r18, r20
 490:	2a bb       	out	0x1a, r18	; 26

  masklo	=~maskhi&ws2812_PORTREG;
 492:	2b b3       	in	r18, 0x1b	; 27
 494:	f4 2e       	mov	r15, r20
 496:	f0 94       	com	r15
 498:	f2 22       	and	r15, r18
  maskhi |=        ws2812_PORTREG;
 49a:	2b b3       	in	r18, 0x1b	; 27
 49c:	e4 2e       	mov	r14, r20
 49e:	e2 2a       	or	r14, r18

  sreg_prev=SREG;
 4a0:	df b6       	in	r13, 0x3f	; 63
  cli();
 4a2:	f8 94       	cli
 4a4:	ec 01       	movw	r28, r24
 4a6:	8c 01       	movw	r16, r24
 4a8:	06 0f       	add	r16, r22
 4aa:	17 1f       	adc	r17, r23

  while (datlen--) {
 4ac:	c0 17       	cp	r28, r16
 4ae:	d1 07       	cpc	r29, r17
 4b0:	29 f0       	breq	.+10     	; 0x4bc <ws2812_sendarray_mask+0x3e>
    curbyte=*data++;
    ws2812_send_byte(curbyte, maskhi, masklo);
 4b2:	4f 2d       	mov	r20, r15
 4b4:	6e 2d       	mov	r22, r14
 4b6:	89 91       	ld	r24, Y+
 4b8:	64 df       	rcall	.-312    	; 0x382 <ws2812_send_byte>
 4ba:	f8 cf       	rjmp	.-16     	; 0x4ac <ws2812_sendarray_mask+0x2e>
  }

  SREG=sreg_prev;
 4bc:	df be       	out	0x3f, r13	; 63
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	08 95       	ret

000004ce <ws2812_setleds_pin>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 4ce:	9b 01       	movw	r18, r22
 4d0:	22 0f       	add	r18, r18
 4d2:	33 1f       	adc	r19, r19
 4d4:	62 0f       	add	r22, r18
 4d6:	73 1f       	adc	r23, r19
 4d8:	d2 df       	rcall	.-92     	; 0x47e <ws2812_sendarray_mask>
 4da:	85 e8       	ldi	r24, 0x85	; 133
 4dc:	8a 95       	dec	r24
 4de:	f1 f7       	brne	.-4      	; 0x4dc <ws2812_setleds_pin+0xe>
 4e0:	00 00       	nop
 4e2:	08 95       	ret

000004e4 <ws2812_setleds>:
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 4e4:	42 e0       	ldi	r20, 0x02	; 2
 4e6:	f3 cf       	rjmp	.-26     	; 0x4ce <ws2812_setleds_pin>

000004e8 <ws2812_setleds_rgbw>:
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	42 e0       	ldi	r20, 0x02	; 2
 4f2:	c5 df       	rcall	.-118    	; 0x47e <ws2812_sendarray_mask>
 4f4:	85 ed       	ldi	r24, 0xD5	; 213
 4f6:	8a 95       	dec	r24
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <ws2812_setleds_rgbw+0xe>
 4fa:	00 00       	nop
 4fc:	08 95       	ret

000004fe <ws2812_sendarray>:
 4fe:	42 e0       	ldi	r20, 0x02	; 2
 500:	be cf       	rjmp	.-132    	; 0x47e <ws2812_sendarray_mask>

00000502 <main>:

int main(void)
{
	DDRB = (1 << 3);
 502:	88 e0       	ldi	r24, 0x08	; 8
 504:	87 bb       	out	0x17, r24	; 23

	//enable second USI Port (PA0:2)
	USIPP=0x01;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	81 bb       	out	0x11, r24	; 17

	i2c_init();
 50a:	0c df       	rcall	.-488    	; 0x324 <i2c_init>
	sei();
 50c:	78 94       	sei

	swirly();
 50e:	ff dd       	rcall	.-1026   	; 0x10e <swirly>

	while(1)
	{
		if (i2c_check_stop()) {
inner:
			if (REG_CTRL & CTRL_RST)
 510:	80 91 64 00 	lds	r24, 0x0064
 514:	80 ff       	sbrs	r24, 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <main+0x1a>
				do_reset();
 518:	d0 dd       	rcall	.-1120   	; 0xba <do_reset>
 51a:	0f c0       	rjmp	.+30     	; 0x53a <main+0x38>
			else if (REG_CTRL & CTRL_GLB)
 51c:	80 91 64 00 	lds	r24, 0x0064
 520:	81 ff       	sbrs	r24, 1
 522:	06 c0       	rjmp	.+12     	; 0x530 <main+0x2e>
volatile uint8_t led_data[N_LEDS*3];
const uint8_t init_color[3] PROGMEM = { 0x00, 0x00, 0xFF};

static inline void set_leds_global(void)
{
	ws2812_setleds_constant((struct cRGB *)&REG_GLB_G, N_LEDS);
 524:	64 e1       	ldi	r22, 0x14	; 20
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	85 e6       	ldi	r24, 0x65	; 101
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	36 df       	rcall	.-404    	; 0x39a <ws2812_setleds_constant>
 52e:	05 c0       	rjmp	.+10     	; 0x53a <main+0x38>
}

static inline void update_leds(void)
{
	ws2812_sendarray(led_data, N_LEDS * 3);
 530:	6c e3       	ldi	r22, 0x3C	; 60
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	82 e6       	ldi	r24, 0x62	; 98
 536:	91 e0       	ldi	r25, 0x01	; 1
 538:	e2 df       	rcall	.-60     	; 0x4fe <ws2812_sendarray>
		}
	}
}

int main(void)
{
 53a:	00 e0       	ldi	r16, 0x00	; 0
 53c:	10 e0       	ldi	r17, 0x00	; 0
 53e:	c6 e0       	ldi	r28, 0x06	; 6
 540:	d0 e0       	ldi	r29, 0x00	; 0
 542:	78 01       	movw	r14, r16
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	e8 1a       	sub	r14, r24
 548:	f8 0a       	sbc	r15, r24
{
	char i=0;
	for (i=0;i<N_LEDS;i++)
	{
		//change red and green channel
		led_data[3*i+1]=getValue(StartRegister+i*12+0);
 54a:	ce 01       	movw	r24, r28
 54c:	7f dd       	rcall	.-1282   	; 0x4c <getValue>
 54e:	f7 01       	movw	r30, r14
 550:	ee 59       	subi	r30, 0x9E	; 158
 552:	fe 4f       	sbci	r31, 0xFE	; 254
 554:	80 83       	st	Z, r24
		led_data[3*i]=getValue(StartRegister+i*12+4);
 556:	ce 01       	movw	r24, r28
 558:	04 96       	adiw	r24, 0x04	; 4
 55a:	78 dd       	rcall	.-1296   	; 0x4c <getValue>
 55c:	f8 01       	movw	r30, r16
 55e:	ee 59       	subi	r30, 0x9E	; 158
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	80 83       	st	Z, r24
 564:	78 01       	movw	r14, r16
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	e8 0e       	add	r14, r24
 56a:	f1 1c       	adc	r15, r1
		led_data[3*i+2]=getValue(StartRegister+i*12+8);
 56c:	ce 01       	movw	r24, r28
 56e:	08 96       	adiw	r24, 0x08	; 8
 570:	6d dd       	rcall	.-1318   	; 0x4c <getValue>
 572:	f7 01       	movw	r30, r14
 574:	ee 59       	subi	r30, 0x9E	; 158
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	80 83       	st	Z, r24
 57a:	2c 96       	adiw	r28, 0x0c	; 12
 57c:	0d 5f       	subi	r16, 0xFD	; 253
 57e:	1f 4f       	sbci	r17, 0xFF	; 255


static inline void calc_led_values(void)
{
	char i=0;
	for (i=0;i<N_LEDS;i++)
 580:	c6 3f       	cpi	r28, 0xF6	; 246
 582:	d1 05       	cpc	r29, r1
 584:	f1 f6       	brne	.-68     	; 0x542 <main+0x40>
	swirly();
	goto inner;

	while(1)
	{
		if (i2c_check_stop()) {
 586:	e5 de       	rcall	.-566    	; 0x352 <i2c_check_stop>
 588:	88 23       	and	r24, r24
 58a:	e9 f3       	breq	.-6      	; 0x586 <main+0x84>
 58c:	c1 cf       	rjmp	.-126    	; 0x510 <main+0xe>

0000058e <__divsf3>:
 58e:	0c d0       	rcall	.+24     	; 0x5a8 <__divsf3x>
 590:	e6 c0       	rjmp	.+460    	; 0x75e <__fp_round>
 592:	de d0       	rcall	.+444    	; 0x750 <__fp_pscB>
 594:	40 f0       	brcs	.+16     	; 0x5a6 <__divsf3+0x18>
 596:	d5 d0       	rcall	.+426    	; 0x742 <__fp_pscA>
 598:	30 f0       	brcs	.+12     	; 0x5a6 <__divsf3+0x18>
 59a:	21 f4       	brne	.+8      	; 0x5a4 <__divsf3+0x16>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	19 f0       	breq	.+6      	; 0x5a6 <__divsf3+0x18>
 5a0:	c7 c0       	rjmp	.+398    	; 0x730 <__fp_inf>
 5a2:	51 11       	cpse	r21, r1
 5a4:	10 c1       	rjmp	.+544    	; 0x7c6 <__fp_szero>
 5a6:	ca c0       	rjmp	.+404    	; 0x73c <__fp_nan>

000005a8 <__divsf3x>:
 5a8:	eb d0       	rcall	.+470    	; 0x780 <__fp_split3>
 5aa:	98 f3       	brcs	.-26     	; 0x592 <__divsf3+0x4>

000005ac <__divsf3_pse>:
 5ac:	99 23       	and	r25, r25
 5ae:	c9 f3       	breq	.-14     	; 0x5a2 <__divsf3+0x14>
 5b0:	55 23       	and	r21, r21
 5b2:	b1 f3       	breq	.-20     	; 0x5a0 <__divsf3+0x12>
 5b4:	95 1b       	sub	r25, r21
 5b6:	55 0b       	sbc	r21, r21
 5b8:	bb 27       	eor	r27, r27
 5ba:	aa 27       	eor	r26, r26
 5bc:	62 17       	cp	r22, r18
 5be:	73 07       	cpc	r23, r19
 5c0:	84 07       	cpc	r24, r20
 5c2:	38 f0       	brcs	.+14     	; 0x5d2 <__divsf3_pse+0x26>
 5c4:	9f 5f       	subi	r25, 0xFF	; 255
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	44 1f       	adc	r20, r20
 5ce:	aa 1f       	adc	r26, r26
 5d0:	a9 f3       	breq	.-22     	; 0x5bc <__divsf3_pse+0x10>
 5d2:	33 d0       	rcall	.+102    	; 0x63a <__divsf3_pse+0x8e>
 5d4:	0e 2e       	mov	r0, r30
 5d6:	3a f0       	brmi	.+14     	; 0x5e6 <__divsf3_pse+0x3a>
 5d8:	e0 e8       	ldi	r30, 0x80	; 128
 5da:	30 d0       	rcall	.+96     	; 0x63c <__divsf3_pse+0x90>
 5dc:	91 50       	subi	r25, 0x01	; 1
 5de:	50 40       	sbci	r21, 0x00	; 0
 5e0:	e6 95       	lsr	r30
 5e2:	00 1c       	adc	r0, r0
 5e4:	ca f7       	brpl	.-14     	; 0x5d8 <__divsf3_pse+0x2c>
 5e6:	29 d0       	rcall	.+82     	; 0x63a <__divsf3_pse+0x8e>
 5e8:	fe 2f       	mov	r31, r30
 5ea:	27 d0       	rcall	.+78     	; 0x63a <__divsf3_pse+0x8e>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	bb 1f       	adc	r27, r27
 5f4:	26 17       	cp	r18, r22
 5f6:	37 07       	cpc	r19, r23
 5f8:	48 07       	cpc	r20, r24
 5fa:	ab 07       	cpc	r26, r27
 5fc:	b0 e8       	ldi	r27, 0x80	; 128
 5fe:	09 f0       	breq	.+2      	; 0x602 <__divsf3_pse+0x56>
 600:	bb 0b       	sbc	r27, r27
 602:	80 2d       	mov	r24, r0
 604:	bf 01       	movw	r22, r30
 606:	ff 27       	eor	r31, r31
 608:	93 58       	subi	r25, 0x83	; 131
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	2a f0       	brmi	.+10     	; 0x618 <__divsf3_pse+0x6c>
 60e:	9e 3f       	cpi	r25, 0xFE	; 254
 610:	51 05       	cpc	r21, r1
 612:	68 f0       	brcs	.+26     	; 0x62e <__divsf3_pse+0x82>
 614:	8d c0       	rjmp	.+282    	; 0x730 <__fp_inf>
 616:	d7 c0       	rjmp	.+430    	; 0x7c6 <__fp_szero>
 618:	5f 3f       	cpi	r21, 0xFF	; 255
 61a:	ec f3       	brlt	.-6      	; 0x616 <__divsf3_pse+0x6a>
 61c:	98 3e       	cpi	r25, 0xE8	; 232
 61e:	dc f3       	brlt	.-10     	; 0x616 <__divsf3_pse+0x6a>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f7 95       	ror	r31
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c9 f7       	brne	.-14     	; 0x620 <__divsf3_pse+0x74>
 62e:	88 0f       	add	r24, r24
 630:	91 1d       	adc	r25, r1
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret
 63a:	e1 e0       	ldi	r30, 0x01	; 1
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	bb 1f       	adc	r27, r27
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	ba 07       	cpc	r27, r26
 64c:	20 f0       	brcs	.+8      	; 0x656 <__divsf3_pse+0xaa>
 64e:	62 1b       	sub	r22, r18
 650:	73 0b       	sbc	r23, r19
 652:	84 0b       	sbc	r24, r20
 654:	ba 0b       	sbc	r27, r26
 656:	ee 1f       	adc	r30, r30
 658:	88 f7       	brcc	.-30     	; 0x63c <__divsf3_pse+0x90>
 65a:	e0 95       	com	r30
 65c:	08 95       	ret

0000065e <__fixunssfsi>:
 65e:	98 d0       	rcall	.+304    	; 0x790 <__fp_splitA>
 660:	88 f0       	brcs	.+34     	; 0x684 <__fixunssfsi+0x26>
 662:	9f 57       	subi	r25, 0x7F	; 127
 664:	90 f0       	brcs	.+36     	; 0x68a <__fixunssfsi+0x2c>
 666:	b9 2f       	mov	r27, r25
 668:	99 27       	eor	r25, r25
 66a:	b7 51       	subi	r27, 0x17	; 23
 66c:	a0 f0       	brcs	.+40     	; 0x696 <__fixunssfsi+0x38>
 66e:	d1 f0       	breq	.+52     	; 0x6a4 <__fixunssfsi+0x46>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	88 1f       	adc	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	1a f0       	brmi	.+6      	; 0x680 <__fixunssfsi+0x22>
 67a:	ba 95       	dec	r27
 67c:	c9 f7       	brne	.-14     	; 0x670 <__fixunssfsi+0x12>
 67e:	12 c0       	rjmp	.+36     	; 0x6a4 <__fixunssfsi+0x46>
 680:	b1 30       	cpi	r27, 0x01	; 1
 682:	81 f0       	breq	.+32     	; 0x6a4 <__fixunssfsi+0x46>
 684:	9f d0       	rcall	.+318    	; 0x7c4 <__fp_zero>
 686:	b1 e0       	ldi	r27, 0x01	; 1
 688:	08 95       	ret
 68a:	9c c0       	rjmp	.+312    	; 0x7c4 <__fp_zero>
 68c:	67 2f       	mov	r22, r23
 68e:	78 2f       	mov	r23, r24
 690:	88 27       	eor	r24, r24
 692:	b8 5f       	subi	r27, 0xF8	; 248
 694:	39 f0       	breq	.+14     	; 0x6a4 <__fixunssfsi+0x46>
 696:	b9 3f       	cpi	r27, 0xF9	; 249
 698:	cc f3       	brlt	.-14     	; 0x68c <__fixunssfsi+0x2e>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b3 95       	inc	r27
 6a2:	d9 f7       	brne	.-10     	; 0x69a <__fixunssfsi+0x3c>
 6a4:	3e f4       	brtc	.+14     	; 0x6b4 <__fixunssfsi+0x56>
 6a6:	90 95       	com	r25
 6a8:	80 95       	com	r24
 6aa:	70 95       	com	r23
 6ac:	61 95       	neg	r22
 6ae:	7f 4f       	sbci	r23, 0xFF	; 255
 6b0:	8f 4f       	sbci	r24, 0xFF	; 255
 6b2:	9f 4f       	sbci	r25, 0xFF	; 255
 6b4:	08 95       	ret

000006b6 <__floatunsisf>:
 6b6:	e8 94       	clt
 6b8:	09 c0       	rjmp	.+18     	; 0x6cc <__floatsisf+0x12>

000006ba <__floatsisf>:
 6ba:	97 fb       	bst	r25, 7
 6bc:	3e f4       	brtc	.+14     	; 0x6cc <__floatsisf+0x12>
 6be:	90 95       	com	r25
 6c0:	80 95       	com	r24
 6c2:	70 95       	com	r23
 6c4:	61 95       	neg	r22
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	99 23       	and	r25, r25
 6ce:	a9 f0       	breq	.+42     	; 0x6fa <__floatsisf+0x40>
 6d0:	f9 2f       	mov	r31, r25
 6d2:	96 e9       	ldi	r25, 0x96	; 150
 6d4:	bb 27       	eor	r27, r27
 6d6:	93 95       	inc	r25
 6d8:	f6 95       	lsr	r31
 6da:	87 95       	ror	r24
 6dc:	77 95       	ror	r23
 6de:	67 95       	ror	r22
 6e0:	b7 95       	ror	r27
 6e2:	f1 11       	cpse	r31, r1
 6e4:	f8 cf       	rjmp	.-16     	; 0x6d6 <__floatsisf+0x1c>
 6e6:	fa f4       	brpl	.+62     	; 0x726 <__floatsisf+0x6c>
 6e8:	bb 0f       	add	r27, r27
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__floatsisf+0x36>
 6ec:	60 ff       	sbrs	r22, 0
 6ee:	1b c0       	rjmp	.+54     	; 0x726 <__floatsisf+0x6c>
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	16 c0       	rjmp	.+44     	; 0x726 <__floatsisf+0x6c>
 6fa:	88 23       	and	r24, r24
 6fc:	11 f0       	breq	.+4      	; 0x702 <__floatsisf+0x48>
 6fe:	96 e9       	ldi	r25, 0x96	; 150
 700:	11 c0       	rjmp	.+34     	; 0x724 <__floatsisf+0x6a>
 702:	77 23       	and	r23, r23
 704:	21 f0       	breq	.+8      	; 0x70e <__floatsisf+0x54>
 706:	9e e8       	ldi	r25, 0x8E	; 142
 708:	87 2f       	mov	r24, r23
 70a:	76 2f       	mov	r23, r22
 70c:	05 c0       	rjmp	.+10     	; 0x718 <__floatsisf+0x5e>
 70e:	66 23       	and	r22, r22
 710:	71 f0       	breq	.+28     	; 0x72e <__floatsisf+0x74>
 712:	96 e8       	ldi	r25, 0x86	; 134
 714:	86 2f       	mov	r24, r22
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	2a f0       	brmi	.+10     	; 0x726 <__floatsisf+0x6c>
 71c:	9a 95       	dec	r25
 71e:	66 0f       	add	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	da f7       	brpl	.-10     	; 0x71c <__floatsisf+0x62>
 726:	88 0f       	add	r24, r24
 728:	96 95       	lsr	r25
 72a:	87 95       	ror	r24
 72c:	97 f9       	bld	r25, 7
 72e:	08 95       	ret

00000730 <__fp_inf>:
 730:	97 f9       	bld	r25, 7
 732:	9f 67       	ori	r25, 0x7F	; 127
 734:	80 e8       	ldi	r24, 0x80	; 128
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	60 e0       	ldi	r22, 0x00	; 0
 73a:	08 95       	ret

0000073c <__fp_nan>:
 73c:	9f ef       	ldi	r25, 0xFF	; 255
 73e:	80 ec       	ldi	r24, 0xC0	; 192
 740:	08 95       	ret

00000742 <__fp_pscA>:
 742:	00 24       	eor	r0, r0
 744:	0a 94       	dec	r0
 746:	16 16       	cp	r1, r22
 748:	17 06       	cpc	r1, r23
 74a:	18 06       	cpc	r1, r24
 74c:	09 06       	cpc	r0, r25
 74e:	08 95       	ret

00000750 <__fp_pscB>:
 750:	00 24       	eor	r0, r0
 752:	0a 94       	dec	r0
 754:	12 16       	cp	r1, r18
 756:	13 06       	cpc	r1, r19
 758:	14 06       	cpc	r1, r20
 75a:	05 06       	cpc	r0, r21
 75c:	08 95       	ret

0000075e <__fp_round>:
 75e:	09 2e       	mov	r0, r25
 760:	03 94       	inc	r0
 762:	00 0c       	add	r0, r0
 764:	11 f4       	brne	.+4      	; 0x76a <__fp_round+0xc>
 766:	88 23       	and	r24, r24
 768:	52 f0       	brmi	.+20     	; 0x77e <__fp_round+0x20>
 76a:	bb 0f       	add	r27, r27
 76c:	40 f4       	brcc	.+16     	; 0x77e <__fp_round+0x20>
 76e:	bf 2b       	or	r27, r31
 770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0x18>
 772:	60 ff       	sbrs	r22, 0
 774:	04 c0       	rjmp	.+8      	; 0x77e <__fp_round+0x20>
 776:	6f 5f       	subi	r22, 0xFF	; 255
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	08 95       	ret

00000780 <__fp_split3>:
 780:	57 fd       	sbrc	r21, 7
 782:	90 58       	subi	r25, 0x80	; 128
 784:	44 0f       	add	r20, r20
 786:	55 1f       	adc	r21, r21
 788:	59 f0       	breq	.+22     	; 0x7a0 <__fp_splitA+0x10>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	71 f0       	breq	.+28     	; 0x7aa <__fp_splitA+0x1a>
 78e:	47 95       	ror	r20

00000790 <__fp_splitA>:
 790:	88 0f       	add	r24, r24
 792:	97 fb       	bst	r25, 7
 794:	99 1f       	adc	r25, r25
 796:	61 f0       	breq	.+24     	; 0x7b0 <__fp_splitA+0x20>
 798:	9f 3f       	cpi	r25, 0xFF	; 255
 79a:	79 f0       	breq	.+30     	; 0x7ba <__fp_splitA+0x2a>
 79c:	87 95       	ror	r24
 79e:	08 95       	ret
 7a0:	12 16       	cp	r1, r18
 7a2:	13 06       	cpc	r1, r19
 7a4:	14 06       	cpc	r1, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	f2 cf       	rjmp	.-28     	; 0x78e <__fp_split3+0xe>
 7aa:	46 95       	lsr	r20
 7ac:	f1 df       	rcall	.-30     	; 0x790 <__fp_splitA>
 7ae:	08 c0       	rjmp	.+16     	; 0x7c0 <__fp_splitA+0x30>
 7b0:	16 16       	cp	r1, r22
 7b2:	17 06       	cpc	r1, r23
 7b4:	18 06       	cpc	r1, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	f1 cf       	rjmp	.-30     	; 0x79c <__fp_splitA+0xc>
 7ba:	86 95       	lsr	r24
 7bc:	71 05       	cpc	r23, r1
 7be:	61 05       	cpc	r22, r1
 7c0:	08 94       	sec
 7c2:	08 95       	ret

000007c4 <__fp_zero>:
 7c4:	e8 94       	clt

000007c6 <__fp_szero>:
 7c6:	bb 27       	eor	r27, r27
 7c8:	66 27       	eor	r22, r22
 7ca:	77 27       	eor	r23, r23
 7cc:	cb 01       	movw	r24, r22
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <__mulsf3>:
 7d2:	0a d0       	rcall	.+20     	; 0x7e8 <__mulsf3x>
 7d4:	c4 cf       	rjmp	.-120    	; 0x75e <__fp_round>
 7d6:	b5 df       	rcall	.-150    	; 0x742 <__fp_pscA>
 7d8:	28 f0       	brcs	.+10     	; 0x7e4 <__mulsf3+0x12>
 7da:	ba df       	rcall	.-140    	; 0x750 <__fp_pscB>
 7dc:	18 f0       	brcs	.+6      	; 0x7e4 <__mulsf3+0x12>
 7de:	95 23       	and	r25, r21
 7e0:	09 f0       	breq	.+2      	; 0x7e4 <__mulsf3+0x12>
 7e2:	a6 cf       	rjmp	.-180    	; 0x730 <__fp_inf>
 7e4:	ab cf       	rjmp	.-170    	; 0x73c <__fp_nan>
 7e6:	ef cf       	rjmp	.-34     	; 0x7c6 <__fp_szero>

000007e8 <__mulsf3x>:
 7e8:	cb df       	rcall	.-106    	; 0x780 <__fp_split3>
 7ea:	a8 f3       	brcs	.-22     	; 0x7d6 <__mulsf3+0x4>

000007ec <__mulsf3_pse>:
 7ec:	99 23       	and	r25, r25
 7ee:	d9 f3       	breq	.-10     	; 0x7e6 <__mulsf3+0x14>
 7f0:	55 23       	and	r21, r21
 7f2:	c9 f3       	breq	.-14     	; 0x7e6 <__mulsf3+0x14>
 7f4:	95 0f       	add	r25, r21
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	55 1f       	adc	r21, r21
 7fa:	aa 27       	eor	r26, r26
 7fc:	ee 27       	eor	r30, r30
 7fe:	ff 27       	eor	r31, r31
 800:	bb 27       	eor	r27, r27
 802:	00 24       	eor	r0, r0
 804:	08 94       	sec
 806:	67 95       	ror	r22
 808:	20 f4       	brcc	.+8      	; 0x812 <__mulsf3_pse+0x26>
 80a:	e2 0f       	add	r30, r18
 80c:	f3 1f       	adc	r31, r19
 80e:	b4 1f       	adc	r27, r20
 810:	0a 1e       	adc	r0, r26
 812:	22 0f       	add	r18, r18
 814:	33 1f       	adc	r19, r19
 816:	44 1f       	adc	r20, r20
 818:	aa 1f       	adc	r26, r26
 81a:	66 95       	lsr	r22
 81c:	a9 f7       	brne	.-22     	; 0x808 <__mulsf3_pse+0x1c>
 81e:	77 95       	ror	r23
 820:	30 f4       	brcc	.+12     	; 0x82e <__mulsf3_pse+0x42>
 822:	f3 0f       	add	r31, r19
 824:	b4 1f       	adc	r27, r20
 826:	0a 1e       	adc	r0, r26
 828:	12 1e       	adc	r1, r18
 82a:	08 f4       	brcc	.+2      	; 0x82e <__mulsf3_pse+0x42>
 82c:	63 95       	inc	r22
 82e:	33 0f       	add	r19, r19
 830:	44 1f       	adc	r20, r20
 832:	aa 1f       	adc	r26, r26
 834:	22 1f       	adc	r18, r18
 836:	76 95       	lsr	r23
 838:	99 f7       	brne	.-26     	; 0x820 <__mulsf3_pse+0x34>
 83a:	87 95       	ror	r24
 83c:	20 f4       	brcc	.+8      	; 0x846 <__mulsf3_pse+0x5a>
 83e:	b4 0f       	add	r27, r20
 840:	0a 1e       	adc	r0, r26
 842:	12 1e       	adc	r1, r18
 844:	63 1f       	adc	r22, r19
 846:	44 0f       	add	r20, r20
 848:	aa 1f       	adc	r26, r26
 84a:	22 1f       	adc	r18, r18
 84c:	33 1f       	adc	r19, r19
 84e:	86 95       	lsr	r24
 850:	a9 f7       	brne	.-22     	; 0x83c <__mulsf3_pse+0x50>
 852:	86 2f       	mov	r24, r22
 854:	71 2d       	mov	r23, r1
 856:	60 2d       	mov	r22, r0
 858:	11 24       	eor	r1, r1
 85a:	9f 57       	subi	r25, 0x7F	; 127
 85c:	50 40       	sbci	r21, 0x00	; 0
 85e:	8a f0       	brmi	.+34     	; 0x882 <__mulsf3_pse+0x96>
 860:	e1 f0       	breq	.+56     	; 0x89a <__mulsf3_pse+0xae>
 862:	88 23       	and	r24, r24
 864:	4a f0       	brmi	.+18     	; 0x878 <__mulsf3_pse+0x8c>
 866:	ee 0f       	add	r30, r30
 868:	ff 1f       	adc	r31, r31
 86a:	bb 1f       	adc	r27, r27
 86c:	66 1f       	adc	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	91 50       	subi	r25, 0x01	; 1
 874:	50 40       	sbci	r21, 0x00	; 0
 876:	a9 f7       	brne	.-22     	; 0x862 <__mulsf3_pse+0x76>
 878:	9e 3f       	cpi	r25, 0xFE	; 254
 87a:	51 05       	cpc	r21, r1
 87c:	70 f0       	brcs	.+28     	; 0x89a <__mulsf3_pse+0xae>
 87e:	58 cf       	rjmp	.-336    	; 0x730 <__fp_inf>
 880:	a2 cf       	rjmp	.-188    	; 0x7c6 <__fp_szero>
 882:	5f 3f       	cpi	r21, 0xFF	; 255
 884:	ec f3       	brlt	.-6      	; 0x880 <__mulsf3_pse+0x94>
 886:	98 3e       	cpi	r25, 0xE8	; 232
 888:	dc f3       	brlt	.-10     	; 0x880 <__mulsf3_pse+0x94>
 88a:	86 95       	lsr	r24
 88c:	77 95       	ror	r23
 88e:	67 95       	ror	r22
 890:	b7 95       	ror	r27
 892:	f7 95       	ror	r31
 894:	e7 95       	ror	r30
 896:	9f 5f       	subi	r25, 0xFF	; 255
 898:	c1 f7       	brne	.-16     	; 0x88a <__mulsf3_pse+0x9e>
 89a:	fe 2b       	or	r31, r30
 89c:	88 0f       	add	r24, r24
 89e:	91 1d       	adc	r25, r1
 8a0:	96 95       	lsr	r25
 8a2:	87 95       	ror	r24
 8a4:	97 f9       	bld	r25, 7
 8a6:	08 95       	ret

000008a8 <_exit>:
 8a8:	f8 94       	cli

000008aa <__stop_program>:
 8aa:	ff cf       	rjmp	.-2      	; 0x8aa <__stop_program>
